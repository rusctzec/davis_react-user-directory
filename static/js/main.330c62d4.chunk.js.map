{"version":3,"sources":["utils/indexedDb.js","components/Card/index.js","components/UserView/index.js","components/ControlPanel/index.js","App.js","index.js"],"names":["db","request","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","open","onupgradeneeded","target","result","createObjectStore","autoIncrement","onsuccess","onerror","event","console","log","errorCode","checkDatabase","callback","Promise","resolve","reject","waitForDbLoad","setTimeout","then","getAll","transaction","objectStore","saveRecord","record","add","Card","props","className","name","age","email","img","src","alt","UserView","users","options","processedUsers","sortState","filter","item","filterField","String","toUpperCase","includes","filterValue","sort","a","b","a2","b2","sortBy","descending","length","loading","map","user","i","picture","thumbnail","key","ControlPanel","useState","formState","setFormState","updateSortState","e","update","getAttribute","value","updateFormState","data-field","onChange","type","onClick","onSubmit","preventDefault","addUser","required","min","disabled","initialState","reducer","state","action","newState","App","useReducer","dispatch","dispatchSortState","useEffect","dbApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.330c62d4.chunk.js","sourcesContent":["const indexedDB =\r\n  window.indexedDB ||\r\n  window.mozIndexedDB ||\r\n  window.webkitIndexedDB ||\r\n  window.msIndexedDB ||\r\n  window.shimIndexedDB;\r\n\r\nlet db;\r\nconst request = indexedDB.open(\"directory\", 1);\r\n\r\nrequest.onupgradeneeded = ({ target }) => {\r\n  let db = target.result;\r\n  db.createObjectStore(\"pending\", { autoIncrement: true });\r\n};\r\n\r\nrequest.onsuccess = ({ target }) => {\r\n  db = target.result;\r\n};\r\n\r\nrequest.onerror = function(event) {\r\n  console.log(\"IndexedDB error\", event.target.errorCode);\r\n};\r\n\r\nfunction saveRecord(record) {\r\n  const transaction = db.transaction([\"pending\"], \"readwrite\");\r\n  const store = transaction.objectStore(\"pending\");\r\n\r\n  store.add(record);\r\n}\r\n\r\nfunction checkDatabase(callback) {\r\n\r\n  // wait until db exists\r\n  new Promise((resolve, reject) => {\r\n    (function waitForDbLoad() {\r\n      if (db != null) return resolve();\r\n      setTimeout(waitForDbLoad, 30);\r\n    })();\r\n\r\n  }).then(() => {\r\n    const transaction = db.transaction([\"pending\"], \"readwrite\");\r\n    const store = transaction.objectStore(\"pending\");\r\n    const getAll = store.getAll();\r\n\r\n    getAll.onsuccess = function() {\r\n      callback(getAll.result);\r\n    }\r\n  })\r\n}\r\n\r\nexport default {checkDatabase, saveRecord}","import React from 'react';\r\nimport './style.css';\r\n\r\n\r\nfunction Card(props) {\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <p>{props.name}</p>\r\n      <p>{props.age} years old</p>\r\n      <p>{props.email}</p>\r\n      {props.img ? <img src={props.img} alt={props.name}/> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n\r\n","// this should hold all the users and order them with flex, maybe with pagination\r\nimport React from 'react';\r\nimport Card from '../Card';\r\nimport './style.css';\r\n\r\n// logic for sorting\r\nfunction sortUsers(users, options) {\r\n  return users\r\n  .filter((item) => {\r\n    // filtering out by content of a field\r\n    if (options.filterField) {\r\n      if (!String(item[options.filterField]).toUpperCase().includes(options.filterValue.toUpperCase())) return false;\r\n    }\r\n    return true;\r\n  })\r\n  .sort((a, b) => {\r\n    let a2, b2; // make copies of inputs\r\n    // for alphabetical sorting (not numbers) uppercase strings so that comparison is case insensitive\r\n    if (typeof a == \"string\" && typeof b == \"string\") { a2 = a.toUpperCase(); b2 = b.toUpperCase(); }\r\n    else { a2 = a; b2 = b; }\r\n\r\n\r\n\r\n    if (a2[options.sortBy] > b2[options.sortBy]) { return options.descending ? -1 : 1; }\r\n    if (a2[options.sortBy] < b2[options.sortBy]) { return options.descending ? 1 : -1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\n\r\nconst UserView = (props) => {\r\n\r\n  // sort and filter users every render\r\n  let processedUsers = sortUsers(props.users, props.sortState);\r\n\r\n  return (\r\n    <div>\r\n    <p className=\"amount\">{processedUsers.length} shown of {props.users.length}</p>\r\n    <div className=\"user-view\">\r\n      {props.loading ?\r\n        <h1>Loading...</h1>\r\n      :\r\n      processedUsers.map((user, i) => {\r\n        return (<Card\r\n          name={user.name}\r\n          age={user.age}\r\n          email={user.email}\r\n          img={user?.picture?.thumbnail}\r\n          key={i}\r\n        />);\r\n      })}\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default UserView;","import React, { useState } from 'react';\r\nimport './style.css';\r\n\r\nconst ControlPanel = props => {\r\n  // this is supposed to sort users and stuff\r\n  // and add them too. with a form and stuff.\r\n\r\n  const [formState, setFormState] = useState({name: \"\", age: 0, email: \"\"});\r\n\r\n  const updateSortState = e => {\r\n    const update = {[e.target.getAttribute(\"data-field\")]: e.target.value}\r\n    props.updateSortState(update);\r\n  }\r\n  const updateFormState = e => {\r\n    setFormState({...formState, [e.target.getAttribute(\"name\")]: e.target.value})\r\n  };\r\n\r\n  const addUser = e => {\r\n    e.preventDefault();\r\n    props.addUser(formState);\r\n    setFormState({name: \"\", age: 0, email: \"\"})\r\n  }\r\n\r\n  // TODO save and load from indexedDb\r\n\r\n\r\n  return (\r\n    <div className=\"control-panel\">\r\n      <h1>Control Panel</h1>\r\n      <h2>Filter:</h2>\r\n      <div>\r\n        <span>If</span>\r\n        <select data-field=\"filterField\" onChange={updateSortState}>\r\n          <option value=\"name\">Name</option>\r\n          <option value=\"age\">Age</option>\r\n          <option value=\"email\">Email</option>\r\n        </select>\r\n        <span>includes</span>\r\n        <input type=\"text\" data-field=\"filterValue\" onChange={updateSortState}/>\r\n      </div>\r\n      <h2>Sort by:</h2>\r\n      <button data-field=\"sortBy\" value=\"name\" onClick={updateSortState}>Name</button>\r\n      <button data-field=\"sortBy\" value=\"age\" onClick={updateSortState}>Age</button>\r\n      <button data-field=\"sortBy\" value=\"email\" onClick={updateSortState}>Email</button>\r\n      <form onSubmit={addUser}>\r\n        <h2>Create:</h2>\r\n        <label>Name</label><input required value={formState.name} name=\"name\" type=\"text\" onChange={updateFormState}/>\r\n        <label>Age</label><input required value={formState.age} name=\"age\" min=\"0\" type=\"number\" onChange={updateFormState}/>\r\n        <label>Email</label><input required value={formState.email} name=\"email\" type=\"text\" onChange={updateFormState}/>\r\n        <button { ...((formState.name === \"\" || formState.email === \"\") ? {disabled: true} : {}) }>Add User</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default ControlPanel;","import React, { useEffect, useReducer } from \"react\";\r\nimport dbApi from \"./utils/indexedDb\";\r\nimport \"./App.css\";\r\nimport UserView from \"./components/UserView\";\r\nimport ControlPanel from './components/ControlPanel';\r\n// control state up here, holding dict of all the users, sorting logic\r\n// manipulate children using a \"visible\" prop\r\n\r\nconst initialState = {loading: true, users: []};\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"addUsers\":\r\n      let newState = {...state, users: [...state.users, ...action.users]};\r\n      newState.loading = false;\r\n\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  let [sortState, dispatchSortState] = useReducer((state, newState) => {\r\n    // setting the same sort twice will flip between ascending and descending sorting\r\n    if (newState.sortBy === state.sortBy) {\r\n      newState.descending = !state.descending\r\n    }\r\n    return {...state, ...newState}\r\n  }, {descending: true, sortBy: \"name\", filterField: \"name\", filterValue: \"\"});\r\n\r\n  // load entries from indexedDB at beginning of session\r\n  useEffect(() => {\r\n   dbApi.checkDatabase(result => {\r\n    dispatch({type: \"addUsers\", users: result});\r\n   });\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <UserView users={state.users} sortState={sortState}/>\r\n      <ControlPanel addUser={(formState) => { dbApi.saveRecord(formState); dispatch({type: \"addUsers\", users: [formState]}); }} updateSortState={dispatchSortState}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}